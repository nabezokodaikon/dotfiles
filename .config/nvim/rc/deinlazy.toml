# denite.nvim
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
depends = [
    'unite.vim',
    'neomru.vim',
    'neoyank.vim',
    'vim-gista-unite'
    ]
hook_source = '''
    " Key mapping.
    call denite#custom#map(
                \ 'insert',
                \ '<C-n>',
                \ '<denite:move_to_next_line>',
                \ 'noremap'
                \ )
    call denite#custom#map(
                \ 'insert',
                \ '<C-p>',
                \ '<denite:move_to_previous_line>',
                \ 'noremap'
                \ )

    " Command option.
    call denite#custom#option('_', 'winheight', 16)
    call denite#custom#option('_', 'highlight_mode_insert', 'Search')
    call denite#custom#option('_', 'previewheight', 100)

    " Change matches to perfect matching.
    call denite#custom#source('_', 'matchers',
        \ ['matcher/substring'])

    call denite#custom#source('buffer', 'matchers',
        \ ['matcher/fuzzy', 'matcher/project_files'])

    " Ripgrep command on file_rec source.
    call denite#custom#var('file_rec', 'command',
        \ ['rg', '--hidden', '--glob', '!.git/*', '--files'])

    " Ripgrep command on grep source.
    " Reference 
    " https://github.com/BurntSushi/ripgrep/issues/73
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading', '--hidden', '--glob', '!.git/*', '--color', 'never'])

    " Because changing focus, if the vim-gista-unite's narrow action.
    call unite#custom#profile('default', 'context', {
                \   'start_insert': 0,
                \   'prompt_direction': 'top',
                \   'split' : 0
                \})
'''

# unite.vim
[[plugins]]
repo = 'Shougo/unite.vim'

# denite.nvimでファイル表示履歴を表示する。
[[plugins]]
repo = 'Shougo/neomru.vim'
hook_source = '''
    let g:neomru#file_mru_limit = 64
    let g:neomru#time_format = "%y/%m/%d %H:%M"
'''

# denite.vimでyankの履歴を表示する。
[[plugins]]
repo = 'Shougo/neoyank.vim'

# vim-gista と unite を連携させる。
[[plugins]]
repo = 'lambdalisue/vim-gista-unite'

# gist を使用する。
[[plugins]]
repo = 'lambdalisue/vim-gista'
on_cmd = 'Gista'
hook_source = '''
    let g:gista#client#default_username = 'nabezokodaikon'
'''

# 補完
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''
    call deoplete#custom#source('_',
                \ 'matchers', ['matcher_head'])

    call deoplete#custom#option({
                \ 'auto_complete_delay': 200,
                \ 'smart_case': v:true,
                \ 'min_pattern_length': 2
                \ })

    call deoplete#custom#option('sources', {
                \ '_': ['buffer'],
                \ 'html': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
                \ 'css': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
                \ 'javascript': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
                \ 'javascript.jsx': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
                \ 'typescript': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
                \ 'scala': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
                \ 'haskell': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag']
                \ })
'''

# emmet-vim
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
hook_source = '''
    let g:user_emmet_install_global = 0
    augroup emmet-vim
        autocmd!
        autocmd FileType html,css,javascript,javascript.jsx,typescript,typescript.tsx EmmetInstall
    augroup END
'''

# Scala のシンタックスハイライト
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

# JSX Syntax
[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

# Syntax Highlighting and Indentation for Haskell and Cabal
[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'
hook_source = '''
    let g:haskell_indent_guard = 4
'''

# toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# TypeScript syntax
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# Provides more syntax highlighting and DOM keywords for TypeScript
[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = 'typescript'

# Typescript tooling for Neovim
[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
on_ft = 'typescript'
