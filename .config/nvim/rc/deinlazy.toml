# denite.nvim
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
depends = [
    'neomru.vim',
    'neoyank.vim'
    ]
hook_source = '''
    " Key mapping.
    call denite#custom#map(
                \ 'insert',
                \ '<C-n>',
                \ '<denite:move_to_next_line>',
                \ 'noremap'
                \ )
    call denite#custom#map(
                \ 'insert',
                \ '<C-p>',
                \ '<denite:move_to_previous_line>',
                \ 'noremap'
                \ )

    " Command option.
    call denite#custom#option('_', 'winheight', 16)
    call denite#custom#option('_', 'highlight_mode_insert', 'Search')
    call denite#custom#option('_', 'previewheight', 100)

    " Change matches to perfect matching.
    call denite#custom#source('_', 'matchers',
        \ ['matcher/substring'])

    call denite#custom#source('buffer', 'matchers',
        \ ['matcher/fuzzy', 'matcher/project_files'])

    " Ripgrep command on file_rec source.
    call denite#custom#var('file_rec', 'command',
        \ ['rg', '--hidden', '--glob', '!.git/*', '--files'])

    " Ripgrep command on grep source.
    " Reference 
    " https://github.com/BurntSushi/ripgrep/issues/73
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'final_opts', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--vimgrep', '--no-heading', '--hidden', '--glob', '!.git/*', '--color', 'never'])
'''

# denite.nvimでファイル表示履歴を表示する。
[[plugins]]
repo = 'Shougo/neomru.vim'
hook_source = '''
    let g:neomru#file_mru_limit = 64
    let g:neomru#time_format = "%y/%m/%d %H:%M"
'''

# denite.vimでyankの履歴を表示する。
[[plugins]]
repo = 'Shougo/neoyank.vim'

# Completion
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''

    call deoplete#custom#option({
        \ 'smart_case': v:true,
        \})


    call deoplete#custom#option('sources', {
        \ 'scala': ['buffer', 'dictionary', 'file', 'member', 'omni', 'tag'],
        \})

    call deoplete#custom#source('_', 
        \ 'matchers', ['matcher_head'])

    call deoplete#custom#var('omni', 'input_patterns', {
        \ 'scala': [
        \     '[^. *\t]\.\w*',
        \     '[:\[,] ?\w*',
        \     '^import .*'
        \   ]
        \})

    call deoplete#enable()
'''

# Completion for Scala
# $ sbt ensimeConfig
# $ sbt ensimeConfigProject
[[plugins]]
repo = 'ensime/ensime-vim'

# Asynchronous linting/fixing for Vim and Language Server Protocol (LSP) integration
[[plugins]]
repo = 'w0rp/ale'
on_ft = 'scala'
hook_source = '''
    let g:ale_completion_enabled = 1
'''
depends = [
    'ensime-vim'
]

# Completion for other language
# Rust: https://github.com/rust-lang/rls
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
on_ft = 'rust'
hook_source = '''
    set hidden
    set completeopt=menu
    set signcolumn=yes

    let g:LanguageClient_serverCommands = {
        \ 'rust': ['~/.cargo/bin/rustup', 'run', 'nightly', 'rls'],
        \ }

    function! s:restartLanguageClient()
        LanguageClientStop
        sleep 300m
        LanguageClientStart
    endfunction

    augroup languageClient-neovim
        autocmd!
        autocmd BufWritePre *.rs call s:restartLanguageClient()
    augroup END

    command! LanguageClientReStart call s:restartLanguageClient()

    LanguageClientStart
'''

# emmet-vim
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
hook_source = '''
    let g:user_emmet_install_global = 0
    augroup emmet-vim
        autocmd!
        autocmd FileType html,css,javascript,javascript.jsx,typescript,typescript.tsx EmmetInstall
    augroup END
'''

# Scala のシンタックスハイライト
[[plugins]]
repo = 'derekwyatt/vim-scala'
on_ft = 'scala'

# JSX Syntax
[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

# Syntax Highlighting and Indentation for Haskell and Cabal
[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = 'haskell'
hook_source = '''
    let g:haskell_indent_guard = 4
'''

# toml syntax
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# TypeScript syntax
[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

# Provides more syntax highlighting and DOM keywords for TypeScript
[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = 'typescript'

# Typescript tooling for Neovim
[[plugins]]
repo = 'mhartington/nvim-typescript'
build = './install.sh'
on_ft = 'typescript'

# Vim configuration for Rust.
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
    let g:rustfmt_command = 'rustup run nightly rustfmt'
    let g:rustfmt_autosave = 1 
'''
