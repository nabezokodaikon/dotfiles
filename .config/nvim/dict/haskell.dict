!!
&&
++
->
::
<-
<=
<*>
<$>
==
=>
>=
\=
||
>>
>>=
<=<
All
Any
AppendMode
Applicative
Bool
Bounded
Control.Applicative
Control.Exception
Control.Monad
Chunk
Data.ByteString
Data.ByteString.Lazy
Data.Char
Data.Foldable
Data.Functor
Data.List
Data.Map
Data.Monoid
Double
ENum
EQ
Empty
Eq
False
First
Float
Floating
Fractional
GT
Handle
Int
Integer
Integral
IO
IOMode
Itegral
Just
Last
LT
Maybe
Nothing
Num
Ord
Ordering
RandomGen
Read
ReadMode
ReadWriteMode
Show
StdGen
String
System.Directory
System.Environment
System.IO
System.Random
True
WriteMode
ZipList
abs
and
anpack
any
appendFile
bracket
bracketOnError
case
ceiling
class
compare
concat
copyFile
cos
data
default
deriving
digitToInt
div
do
drop
elem
else
error
even
fail
filter
find
flip
fmap
foldMap
foldl
foldl1
foldr
foldr1
forever
forM
fromChunks
fromIntegral
fromList
fromListWith
fst
getAny
getArgs
getChar
getContents
getFirst
getLast
getLine
getProduct
getProgName
getStdGen
getSum
getZipList
group
guard
head
hClose
hGetChar
hGetContents
hGetLine
hPutStr
hPutStrLn
id
if
import
in
infix
infixl
infixr
init
instance
interact
intersperse
isDigit
isInfixOf
isPrefixOf
last
length
let
liftA2
lines
log
lookup
map
mapM
mapM_
mappend
max
maxBound
maximum
mconcat
mempty 
min
minBound
minimum
mkStdGen
mod
module
negate
newtype
newStdGen
not
nub
null
odd
of
openFile
openTempFile
otherwise
pack
pi
pred
print
product
pure
putChar
putStr
putStrLn
qualified
random
randoms
read
readFile
recip
removeFile
renameFile
replicate
return
reverse
scanl
scanr
sequence
sequenceA
show
signum
sin
size
snd
sort
sqrt
subtract
succ
sum
tail
tails
take
takeWhile
tan
then
toChunks
toLower
toUpper
type
undefined
unlines
unwords
when
where
withFile
writeFile
words
zip
zipWith
zipWith2
zipWith3
zipWith4
zipWith5
zipWith6
zipWith7
