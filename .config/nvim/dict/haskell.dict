!!
&&
++
->
::
<-
<=
==
=>
>=
\=
||
Bool
Bounded
Char
Data
Double
ENum
EQ
Eq
False
Float
Floating
GT
Int
Integer
Itegral
Just
LT
List
Map
Maybe
Nothing
Num
Ord
Read
Show
String
True
any
ceiling
compare
cos
data
deriving
digitToInt
drop
elem
else
error
even
filter
find
flip
foldl
foldl1
foldr
foldr1
fromIntegral
fromList
fromListWith
fst
group
head
if
import
infixl
infixr
init
isDigit
isInfixOf
isPrefixOf
last
length
let
lookup
map
max
maxBound
maximum
min
minBound
minimum
module
negate
not
nub
null
odd
otherwise
pi
pred
product
qualified
read
replicate
reverse
scanl
scanr
show
sin
size
snd
sort
sqrt
subtract
succ
sum
tail
tails
take
takeWhile
tan
type
then
where
zip
zipWith
