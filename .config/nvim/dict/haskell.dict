::
=>
->
==
\=
||
&&
<=
<-
>=
++
!!
if
then
else
let

Eq
Ord
Show
Read
ENum
Bounded
Num
Floating
Itegral

Bool
Char
String
Int
Integer
Float
Double

True
False
LT
EQ
GT

compare
show
read
succ
pred
min
max
minBound
maxBound
sin
cos
sqrt
pi
fromIntegral
subtract

not
head
tail
last
init
length
null
map
filter
replicate
reverse
take
takeWhile
drop
maximum
minimum
sum
product
elem
zip
zipWith
flip
foldl
foldl1
foldr
foldr1

fst
snd

error

where
otherwise
